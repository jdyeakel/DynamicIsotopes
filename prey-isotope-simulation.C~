#include <iostream>
#include <random>
#include <cmath>
using namespace std;

// User-defined functions
double dirichlet(const size_t K, const int a[], double output[]);
double variance(const size_t K, const int a[], const double mu[], const double s[]);

// Gaussian random engine from <random>
default_random_engine z;
normal_distribution<double> gaussian(0.L, 1.L);


main()
	{
	// Parameters: K = total number of prey; mu[] and s[] are mean and stdev of the normal distributed isotope values; a[] = alphas for the dirichlet
	const size_t K = 3;
	const double f=0.3L, mu[K]={10.L,12.L,14.L}, s[K]={1.L,2.L,1.L};
	const int a[K]={1,3,2};
	
	// constants for simulation: timestep, initial position, auxilary constants and alpha0
	const double dt=1.L, X0=0.L, fpdt=(1.L-f)*dt, fpsqdt=(1.L-f)*sqrt(dt); int a0=0; for(int i=0; i<K; i++) a0 += a[i];
	
	// Mean of the sum ( pi Xi )
	double mean = 0.L; for(int i=0; i<K; i++) mean += (double)a[i]*mu[i]; mean = mean/(double)a0;
	
	// Total time of simulation
	const double T=100000.L;
	const int tmax=(int)(T/dt);
	
	// variables 
	double Xb=X0;
	double randompart=0.L;
	double p[K]={0.L}, X[K]={0.L}, sumpi=0.L;
	
	// main simulation loop
	for(int t=0; t<tmax; t++)
		{
		dirichlet(K, a, p);	// K, a[] are inputs, output stored in p[]
		
		// Calculate sum (pi Xi)-mean		
		randompart=sumpi=0.L; for(int i=0; i<K; i++){ randompart += p[i]*(mu[i]+s[i]*gaussian(z)); sumpi += p[i]; } randompart = randompart/sumpi-mean;

		// Calculate increment. (Sum (pi Xi)-mean) multiplied by (1-f)sqrt(dt), everything else by (1-f)dt
		Xb += fpdt*(mean-Xb) + randompart*fpsqdt;
		
		// Output
		if(t%100==0) cout << (double)t*dt << '\t' << Xb << endl;
		}


//	Uncomment below to output variance
//	cout << sqrt(variance(K, a, mu, s)) << endl;
	}	
	
	
	
// User-defined functions

double dirichlet(const size_t K, const int a[], double output[])
	{
	for(int i=0; i<K; i++)
		{
		output[i]=0.L;
		for(int j=0; j<a[i]; j++) output[i] += log((double)RAND_MAX/(double)rand());
		}
	double sum=0.L; for(int i=0; i<K; i++) sum += output[i];
	for(int i=0; i<K; i++) output[i] = output[i]/sum;
	}
	
double variance(const size_t K, const int a[], const double mu[], const double s[])
	{
	double result = 0.L; double al[K]; for(int i=0; i<K; i++) al[i] = (double)a[i];
	double a0 = 0.L; for(int i=0; i<K; i++) a0 += al[i];
	for(int i=0; i<K; i++)
		{
		result += al[i]*(a0-al[i])*s[i]*s[i] + mu[i]*mu[i]*al[i]*(a0-al[i])+al[i]*al[i]*(a0+1.L)*s[i]*s[i];
		for(int j=0; j<K; j++) if(j!=i) result -= mu[i]*mu[j]*al[i]*al[j];
		}
	result = result/(a0*a0*(a0+1.L));
	return result;
	}



